// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_BW_BW_H_
#define FLATBUFFERS_GENERATED_BW_BW_H_

#include "flatbuffers/flatbuffers.h"


namespace bw {

struct Player;
struct Game;
struct Frame;
struct ChangeSet;

struct Player FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  PlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PlayerBuilder &operator=(const PlayerBuilder &);
  flatbuffers::Offset<Player> Finish() {
    auto o = flatbuffers::Offset<Player>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Player> CreatePlayer(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

struct Game FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<Player>> *players() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Player>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* players */) &&
           verifier.Verify(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           verifier.EndTable();
  }
};

struct GameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_players(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Player>>> players) { fbb_.AddOffset(4, players); }
  GameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GameBuilder &operator=(const GameBuilder &);
  flatbuffers::Offset<Game> Finish() {
    auto o = flatbuffers::Offset<Game>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Game> CreateGame(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Player>>> players = 0) {
  GameBuilder builder_(_fbb);
  builder_.add_players(players);
  return builder_.Finish();
}

struct Frame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           verifier.EndTable();
  }
};

struct FrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  FrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FrameBuilder &operator=(const FrameBuilder &);
  flatbuffers::Offset<Frame> Finish() {
    auto o = flatbuffers::Offset<Frame>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Frame> CreateFrame(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0) {
  FrameBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct ChangeSet FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const Game *game() const { return GetPointer<const Game *>(4); }
  const Frame *frame() const { return GetPointer<const Frame *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* game */) &&
           verifier.VerifyTable(game()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* frame */) &&
           verifier.VerifyTable(frame()) &&
           verifier.EndTable();
  }
};

struct ChangeSetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_game(flatbuffers::Offset<Game> game) { fbb_.AddOffset(4, game); }
  void add_frame(flatbuffers::Offset<Frame> frame) { fbb_.AddOffset(6, frame); }
  ChangeSetBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ChangeSetBuilder &operator=(const ChangeSetBuilder &);
  flatbuffers::Offset<ChangeSet> Finish() {
    auto o = flatbuffers::Offset<ChangeSet>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ChangeSet> CreateChangeSet(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<Game> game = 0,
   flatbuffers::Offset<Frame> frame = 0) {
  ChangeSetBuilder builder_(_fbb);
  builder_.add_frame(frame);
  builder_.add_game(game);
  return builder_.Finish();
}

inline const ChangeSet *GetChangeSet(const void *buf) { return flatbuffers::GetRoot<ChangeSet>(buf); }

inline bool VerifyChangeSetBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<ChangeSet>(); }

inline const char *ChangeSetIdentifier() { return "BWAI"; }

inline bool ChangeSetBufferHasIdentifier(const void *buf) { return flatbuffers::BufferHasIdentifier(buf, ChangeSetIdentifier()); }

inline void FinishChangeSetBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<ChangeSet> root) { fbb.Finish(root, ChangeSetIdentifier()); }

}  // namespace bw

#endif  // FLATBUFFERS_GENERATED_BW_BW_H_
